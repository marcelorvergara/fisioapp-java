/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MainPackage;

import com.google.api.core.ApiFuture;

import com.google.cloud.firestore.QueryDocumentSnapshot;
import com.google.cloud.firestore.QuerySnapshot;
import java.awt.Color;
import java.awt.Component;

import java.awt.Desktop;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.sql.Timestamp;
import java.text.DateFormat;
import static java.text.DateFormat.FULL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.ExecutionException;
import java.util.function.Consumer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultRowSorter;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author marcelo
 */
public class ListaCalendario extends javax.swing.JFrame {

    DefaultTableModel modeloTabela = new DefaultTableModel();
    ArrayList<ModelConfirmacoes> mdconf = new ArrayList<>();

    /**
     * Creates new form Calendario
     *
     * @throws java.lang.InterruptedException
     * @throws java.util.concurrent.ExecutionException
     */
    public ListaCalendario() throws InterruptedException, ExecutionException {
        initComponents();
        initConfirmacoes();
        carregaCalendario();

    }

    ListaCalendario(Timestamp tsIni, Timestamp tsFim, String paciente, String resp, String status) throws InterruptedException, ExecutionException {
        initComponents();
        initConfirmacoes();
        carregaCalendario(tsIni, tsFim, paciente, resp, status);
    }

    ListaCalendario(String paciente) throws InterruptedException, ExecutionException {
        initComponents();
        initConfirmacoes();
        carregaCalendario(paciente);
    }

    ListaCalendario(String resp, boolean b) throws InterruptedException, ExecutionException {
        initComponents();
        initConfirmacoes();
        carregaCalendario(resp, b);
    }

    ListaCalendario(Timestamp tsIni, Timestamp tsFim) throws InterruptedException, ExecutionException {
        initComponents();
        initConfirmacoes();
        carregaCalendario(tsIni, tsFim);
    }

    ListaCalendario(boolean b, String status) throws InterruptedException, ExecutionException {
        initComponents();
        initConfirmacoes();
        carregaCalendario(b, status);
    }

    ListaCalendario(String paciente, String resp) throws InterruptedException, ExecutionException {
        initComponents();
        initConfirmacoes();
        carregaCalendario(paciente, resp);
    }

    ListaCalendario(Timestamp tsIni, Timestamp tsFim, String paciente) throws InterruptedException, ExecutionException {
        initComponents();
        initConfirmacoes();
        carregaCalendario(tsIni, tsFim, paciente);
    }

    ListaCalendario(String paciente, String status, boolean b) throws InterruptedException, ExecutionException {
        initComponents();
        initConfirmacoes();
        carregaCalendario(paciente, status, b);
    }

    ListaCalendario(Timestamp tsIni, Timestamp tsFim, String resp, boolean b) throws InterruptedException, ExecutionException {
        initComponents();
        initConfirmacoes();
        carregaCalendario(tsIni, tsFim, resp, b);
    }

    ListaCalendario(boolean b, String resp, String status) throws InterruptedException, ExecutionException {
        initComponents();
        initConfirmacoes();
        carregaCalendario(b, resp, status);
    }

    ListaCalendario(boolean b, Timestamp tsIni, Timestamp tsFim, String status, boolean b0, boolean b1) throws InterruptedException, ExecutionException {
        initComponents();
        initConfirmacoes();
        carregaCalendario(b, tsIni, tsFim, status, b0, b1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        TabelaAgenda = new javax.swing.JTable();
        jDesktopPane2 = new javax.swing.JDesktopPane();
        btnFechar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CFRA - Lista Agendamentos");

        TabelaAgenda.setBackground(java.awt.Color.lightGray);
        TabelaAgenda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TabelaAgenda.setGridColor(new java.awt.Color(102, 102, 102));
        jScrollPane1.setViewportView(TabelaAgenda);

        jDesktopPane1.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1244, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
        );

        btnFechar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fechar.png"))); // NOI18N
        btnFechar.setText("Fechar");
        btnFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharActionPerformed(evt);
            }
        });

        jDesktopPane2.setLayer(btnFechar, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane2Layout = new javax.swing.GroupLayout(jDesktopPane2);
        jDesktopPane2.setLayout(jDesktopPane2Layout);
        jDesktopPane2Layout.setHorizontalGroup(
            jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnFechar)
                .addContainerGap())
        );
        jDesktopPane2Layout.setVerticalGroup(
            jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnFechar)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jDesktopPane2)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDesktopPane2)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnFecharActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListaCalendario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListaCalendario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListaCalendario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListaCalendario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new ListaCalendario().setVisible(true);
            } catch (InterruptedException | ExecutionException ex) {
                Logger.getLogger(ListaCalendario.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TabelaAgenda;
    private javax.swing.JButton btnFechar;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JDesktopPane jDesktopPane2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    //sem filtros
    private void carregaCalendario() {

        this.TabelaAgenda.setModel(modeloTabela);

        //TabelaAgenda.setRowSorter(sorter);
        modeloTabela.addColumn("Nome");
        modeloTabela.addColumn("Responśavel");
        modeloTabela.addColumn("Data");
        modeloTabela.addColumn("Dia/Semana");
        modeloTabela.addColumn("Id");
        modeloTabela.addColumn("Telefone");
        modeloTabela.addColumn("Id Agendamento");
        modeloTabela.addColumn("Status");

        FireBaseClient fbc = new FireBaseClient();

        //asynchronously retrieve all documents
        ApiFuture<QuerySnapshot> future = fbc.FirebaseInt().collection("agendamentos").get();
        // future.get() blocks on response
        List<QueryDocumentSnapshot> documents;
        try {
            documents = future.get().getDocuments();
            documents.forEach((QueryDocumentSnapshot document) -> {
                ModelAgendaPaciente agp = null;
                if (document.exists()) {
                    // convert document to POJO
                    agp = document.toObject(ModelAgendaPaciente.class);
                    ArrayList<HashMap<String, Timestamp>> sessoes = agp.sessoes;
                    for (HashMap<String, Timestamp> hashMap : sessoes) {
                        for (String key : hashMap.keySet()) {
                            String idAgend = key.split(" ; ")[4];
                            String dateStr = key.split(" ; ")[0];
                            Date dateSessao;
                            Locale loc = new Locale("pt", "BR");
                            try {
                                DateFormat df = DateFormat.getDateInstance(FULL, loc);
                                dateSessao = new SimpleDateFormat("dd-MM-yyyy - HH:mm").parse(dateStr);

                                modeloTabela.addRow(
                                        new Object[]{
                                            agp.getNome(),
                                            key.split(" ; ")[1],
                                            dateStr,
                                            df.format(dateSessao).split(",")[0],
                                            agp.getCpf(),
                                            agp.getPhone(),
                                            idAgend,
                                            findConfirmacoes(idAgend)});

                            } catch (ParseException ex) {
                                Logger.getLogger(ListaCalendario.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                }
            });
        } catch (InterruptedException | ExecutionException ex) {
            Logger.getLogger(ListaCalendario.class.getName()).log(Level.SEVERE, null, ex);
        }

        tabelaFunctions();
    }

    //com os filtros
    private void carregaCalendario(Timestamp tsIni, Timestamp tsFim, String paciente, String resp, String status) {

        this.TabelaAgenda.setModel(modeloTabela);

        //TabelaAgenda.setRowSorter(sorter);
        modeloTabela.addColumn("Nome");
        modeloTabela.addColumn("Responśavel");
        modeloTabela.addColumn("Data");
        modeloTabela.addColumn("Dia/Semana");
        modeloTabela.addColumn("Id");
        modeloTabela.addColumn("Telefone");
        modeloTabela.addColumn("Id Agendamento");
        modeloTabela.addColumn("Status");

        FireBaseClient fbc = new FireBaseClient();
        //asynchronously retrieve all documents
        ApiFuture<QuerySnapshot> future = fbc.FirebaseInt().collection("agendamentos")
                .whereEqualTo("nome", paciente.split(" ; ")[0])
                .get();
        // future.get() blocks on response
        List<QueryDocumentSnapshot> documents;

        try {
            documents = future.get().getDocuments();
            documents.forEach((QueryDocumentSnapshot document) -> {
                ModelAgendaPaciente agp = null;
                if (document.exists()) {
                    // convert document to POJO
                    agp = document.toObject(ModelAgendaPaciente.class);
                    ArrayList<HashMap<String, Timestamp>> sessoes = agp.sessoes;
                    for (HashMap<String, Timestamp> hashMap : sessoes) {
                        for (String key : hashMap.keySet()) {
                            String dateFormated = new SimpleDateFormat("yyyy-MM-dd HH:mm").format(hashMap.get(key));
                            //intervalo das datas
                            if ((dateFormated.compareTo(tsIni.toString()) > 0 && dateFormated.compareTo(tsFim.toString()) < 0)) {
                                String idAgend = key.split(" ; ")[4];
                                //status
                                if (findConfirmacoes(idAgend).equals(status)) {
                                    String dateStr = key.split(" ; ")[0];
                                    Date dateSessao;
                                    Locale loc = new Locale("pt", "BR");
                                    try {
                                        DateFormat df = DateFormat.getDateInstance(FULL, loc);
                                        dateSessao = new SimpleDateFormat("dd-MM-yyyy - HH:mm").parse(dateStr);
                                        if (resp.equals(key.split(" ; ")[1])) {
                                            modeloTabela.addRow(
                                                    new Object[]{
                                                        agp.getNome(),
                                                        key.split(" ; ")[1],
                                                        dateStr,
                                                        df.format(dateSessao).split(",")[0],
                                                        agp.getCpf(),
                                                        agp.getPhone(),
                                                        idAgend,
                                                        findConfirmacoes(idAgend)});
                                        }

                                    } catch (ParseException ex) {
                                        Logger.getLogger(ListaCalendario.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }

                            }

                        }
                    }
                }
            });
        } catch (InterruptedException | ExecutionException ex) {
            Logger.getLogger(ListaCalendario.class.getName()).log(Level.SEVERE, null, ex);
        }
        tabelaFunctions();
    }

    //por paciente
    private void carregaCalendario(String paciente) {

        this.TabelaAgenda.setModel(modeloTabela);

        //TabelaAgenda.setRowSorter(sorter);
        modeloTabela.addColumn("Nome");
        modeloTabela.addColumn("Responśavel");
        modeloTabela.addColumn("Data");
        modeloTabela.addColumn("Dia/Semana");
        modeloTabela.addColumn("Id");
        modeloTabela.addColumn("Telefone");
        modeloTabela.addColumn("Id Agendamento");
        modeloTabela.addColumn("Status");

        FireBaseClient fbc = new FireBaseClient();
        //asynchronously retrieve all documents
        ApiFuture<QuerySnapshot> future = fbc.FirebaseInt().collection("agendamentos")
                .whereEqualTo("nome", paciente.split(" ; ")[0])
                .get();
        // future.get() blocks on response
        List<QueryDocumentSnapshot> documents;

        try {
            documents = future.get().getDocuments();
            documents.forEach((QueryDocumentSnapshot document) -> {
                ModelAgendaPaciente agp;
                if (document.exists()) {
                    // convert document to POJO
                    agp = document.toObject(ModelAgendaPaciente.class);
                    ArrayList<HashMap<String, Timestamp>> sessoes = agp.sessoes;
                    sessoes.forEach((hashMap) -> {
                        hashMap.keySet().forEach((key) -> {
                            String idAgend = key.split(" ; ")[4];
                            String dateStr = key.split(" ; ")[0];
                            Date dateSessao;
                            Locale loc = new Locale("pt", "BR");
                            try {
                                DateFormat df = DateFormat.getDateInstance(FULL, loc);
                                dateSessao = new SimpleDateFormat("dd-MM-yyyy - HH:mm").parse(dateStr);

                                modeloTabela.addRow(
                                        new Object[]{
                                            agp.getNome(),
                                            key.split(" ; ")[1],
                                            dateStr,
                                            df.format(dateSessao).split(",")[0],
                                            agp.getCpf(),
                                            agp.getPhone(),
                                            idAgend,
                                            findConfirmacoes(idAgend)});

                            } catch (ParseException ex) {
                                Logger.getLogger(ListaCalendario.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        });
                    });
                }
            });
        } catch (InterruptedException | ExecutionException ex) {
            Logger.getLogger(ListaCalendario.class.getName()).log(Level.SEVERE, null, ex);
        }
        tabelaFunctions();
    }

    //por responsavel
    private void carregaCalendario(String resp, boolean b) {
        this.TabelaAgenda.setModel(modeloTabela);

        //TabelaAgenda.setRowSorter(sorter);
        modeloTabela.addColumn("Nome");
        modeloTabela.addColumn("Responśavel");
        modeloTabela.addColumn("Data");
        modeloTabela.addColumn("Dia/Semana");
        modeloTabela.addColumn("Id");
        modeloTabela.addColumn("Telefone");
        modeloTabela.addColumn("Id Agendamento");
        modeloTabela.addColumn("Status");

        FireBaseClient fbc = new FireBaseClient();
        //asynchronously retrieve all documents
        ApiFuture<QuerySnapshot> future = fbc.FirebaseInt().collection("agendamentos")
                .get();
        // future.get() blocks on response
        List<QueryDocumentSnapshot> documents;

        try {
            documents = future.get().getDocuments();
            documents.forEach((QueryDocumentSnapshot document) -> {
                ModelAgendaPaciente agp = null;
                if (document.exists()) {
                    // convert document to POJO
                    agp = document.toObject(ModelAgendaPaciente.class);
                    ArrayList<HashMap<String, Timestamp>> sessoes = agp.sessoes;
                    for (HashMap<String, Timestamp> hashMap : sessoes) {
                        for (String key : hashMap.keySet()) {

                            String idAgend = key.split(" ; ")[4];
                            String dateStr = key.split(" ; ")[0];
                            Date dateSessao;
                            Locale loc = new Locale("pt", "BR");
                            try {
                                DateFormat df = DateFormat.getDateInstance(FULL, loc);
                                dateSessao = new SimpleDateFormat("dd-MM-yyyy - HH:mm").parse(dateStr);
                                if (resp.equals(key.split(" ; ")[1])) {
                                    modeloTabela.addRow(
                                            new Object[]{
                                                agp.getNome(),
                                                key.split(" ; ")[1],
                                                dateStr,
                                                df.format(dateSessao).split(",")[0],
                                                agp.getCpf(),
                                                agp.getPhone(),
                                                idAgend,
                                                findConfirmacoes(idAgend)});
                                }

                            } catch (ParseException ex) {
                                Logger.getLogger(ListaCalendario.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                    }
                }
            });
        } catch (InterruptedException | ExecutionException ex) {
            Logger.getLogger(ListaCalendario.class.getName()).log(Level.SEVERE, null, ex);
        }
        tabelaFunctions();

    }

    //por data
    private void carregaCalendario(Timestamp tsIni, Timestamp tsFim) {
        this.TabelaAgenda.setModel(modeloTabela);

        //TabelaAgenda.setRowSorter(sorter);
        modeloTabela.addColumn("Nome");
        modeloTabela.addColumn("Responśavel");
        modeloTabela.addColumn("Data");
        modeloTabela.addColumn("Dia/Semana");
        modeloTabela.addColumn("Id");
        modeloTabela.addColumn("Telefone");
        modeloTabela.addColumn("Id Agendamento");
        modeloTabela.addColumn("Status");

        FireBaseClient fbc = new FireBaseClient();
        //asynchronously retrieve all documents
        ApiFuture<QuerySnapshot> future = fbc.FirebaseInt().collection("agendamentos")
                .get();
        // future.get() blocks on response
        List<QueryDocumentSnapshot> documents;

        try {
            documents = future.get().getDocuments();
            documents.forEach(new Consumer<QueryDocumentSnapshot>() {
                @Override
                public void accept(QueryDocumentSnapshot document) {
                    ModelAgendaPaciente agp = null;
                    if (document.exists()) {
                        // convert document to POJO
                        agp = document.toObject(ModelAgendaPaciente.class);
                        ArrayList<HashMap<String, Timestamp>> sessoes = agp.sessoes;
                        for (HashMap<String, Timestamp> hashMap : sessoes) {
                            for (String key : hashMap.keySet()) {
                                String dateFormated = new SimpleDateFormat("yyyy-MM-dd HH:mm").format(hashMap.get(key));
                                //intervalo das datas
                                if ((dateFormated.compareTo(tsIni.toString()) > 0 && dateFormated.compareTo(tsFim.toString()) < 0)) {
                                    String idAgend = key.split(" ; ")[4];
                                    //status

                                    String dateStr = key.split(" ; ")[0];
                                    Date dateSessao;
                                    Locale loc = new Locale("pt", "BR");
                                    try {
                                        DateFormat df = DateFormat.getDateInstance(FULL, loc);
                                        dateSessao = new SimpleDateFormat("dd-MM-yyyy - HH:mm").parse(dateStr);

                                        modeloTabela.addRow(
                                                new Object[]{
                                                    agp.getNome(),
                                                    key.split(" ; ")[1],
                                                    dateStr,
                                                    df.format(dateSessao).split(",")[0],
                                                    agp.getCpf(),
                                                    agp.getPhone(),
                                                    idAgend,
                                                    findConfirmacoes(idAgend)});

                                    } catch (ParseException ex) {
                                        Logger.getLogger(ListaCalendario.class.getName()).log(Level.SEVERE, null, ex);
                                    }

                                }

                            }
                        }
                    }
                }
            });
        } catch (InterruptedException | ExecutionException ex) {
            Logger.getLogger(ListaCalendario.class.getName()).log(Level.SEVERE, null, ex);
        }
        tabelaFunctions();
    }

    //por status
    private void carregaCalendario(boolean b, String status) {

        this.TabelaAgenda.setModel(modeloTabela);

        //TabelaAgenda.setRowSorter(sorter);
        modeloTabela.addColumn("Nome");
        modeloTabela.addColumn("Responśavel");
        modeloTabela.addColumn("Data");
        modeloTabela.addColumn("Dia/Semana");
        modeloTabela.addColumn("Id");
        modeloTabela.addColumn("Telefone");
        modeloTabela.addColumn("Id Agendamento");
        modeloTabela.addColumn("Status");

        FireBaseClient fbc = new FireBaseClient();
        //asynchronously retrieve all documents
        ApiFuture<QuerySnapshot> future = fbc.FirebaseInt().collection("agendamentos")
                .get();
        // future.get() blocks on response
        List<QueryDocumentSnapshot> documents;

        try {
            documents = future.get().getDocuments();
            documents.forEach(new Consumer<QueryDocumentSnapshot>() {
                @Override
                public void accept(QueryDocumentSnapshot document) {
                    ModelAgendaPaciente agp = null;
                    if (document.exists()) {
                        // convert document to POJO
                        agp = document.toObject(ModelAgendaPaciente.class);
                        ArrayList<HashMap<String, Timestamp>> sessoes = agp.sessoes;
                        for (HashMap<String, Timestamp> hashMap : sessoes) {
                            for (String key : hashMap.keySet()) {
                                String dateFormated = new SimpleDateFormat("yyyy-MM-dd HH:mm").format(hashMap.get(key));

                                String idAgend = key.split(" ; ")[4];
                                //status
                                if (findConfirmacoes(idAgend).equals(status)) {
                                    String dateStr = key.split(" ; ")[0];
                                    Date dateSessao;
                                    Locale loc = new Locale("pt", "BR");
                                    try {
                                        DateFormat df = DateFormat.getDateInstance(FULL, loc);
                                        dateSessao = new SimpleDateFormat("dd-MM-yyyy - HH:mm").parse(dateStr);

                                        modeloTabela.addRow(
                                                new Object[]{
                                                    agp.getNome(),
                                                    key.split(" ; ")[1],
                                                    dateStr,
                                                    df.format(dateSessao).split(",")[0],
                                                    agp.getCpf(),
                                                    agp.getPhone(),
                                                    idAgend,
                                                    findConfirmacoes(idAgend)});

                                    } catch (ParseException ex) {
                                        Logger.getLogger(ListaCalendario.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }

                            }
                        }
                    }
                }
            });
        } catch (InterruptedException | ExecutionException ex) {
            Logger.getLogger(ListaCalendario.class.getName()).log(Level.SEVERE, null, ex);
        }
        tabelaFunctions();
    }

    //por paciente e responsável
    private void carregaCalendario(String paciente, String resp) {
        this.TabelaAgenda.setModel(modeloTabela);

        //TabelaAgenda.setRowSorter(sorter);
        modeloTabela.addColumn("Nome");
        modeloTabela.addColumn("Responśavel");
        modeloTabela.addColumn("Data");
        modeloTabela.addColumn("Dia/Semana");
        modeloTabela.addColumn("Id");
        modeloTabela.addColumn("Telefone");
        modeloTabela.addColumn("Id Agendamento");
        modeloTabela.addColumn("Status");

        FireBaseClient fbc = new FireBaseClient();
        //asynchronously retrieve all documents
        ApiFuture<QuerySnapshot> future = fbc.FirebaseInt().collection("agendamentos")
                .whereEqualTo("nome", paciente.split(" ; ")[0])
                .get();
        // future.get() blocks on response
        List<QueryDocumentSnapshot> documents;

        try {
            documents = future.get().getDocuments();
            documents.forEach(new Consumer<QueryDocumentSnapshot>() {
                @Override
                public void accept(QueryDocumentSnapshot document) {
                    ModelAgendaPaciente agp = null;
                    if (document.exists()) {
                        // convert document to POJO
                        agp = document.toObject(ModelAgendaPaciente.class);
                        ArrayList<HashMap<String, Timestamp>> sessoes = agp.sessoes;
                        for (HashMap<String, Timestamp> hashMap : sessoes) {
                            for (String key : hashMap.keySet()) {
                                String dateFormated = new SimpleDateFormat("yyyy-MM-dd HH:mm").format(hashMap.get(key));
                                String idAgend = key.split(" ; ")[4];
                                String dateStr = key.split(" ; ")[0];
                                Date dateSessao;
                                Locale loc = new Locale("pt", "BR");
                                try {
                                    DateFormat df = DateFormat.getDateInstance(FULL, loc);
                                    dateSessao = new SimpleDateFormat("dd-MM-yyyy - HH:mm").parse(dateStr);
                                    if (resp.equals(key.split(" ; ")[1])) {
                                        modeloTabela.addRow(
                                                new Object[]{
                                                    agp.getNome(),
                                                    key.split(" ; ")[1],
                                                    dateStr,
                                                    df.format(dateSessao).split(",")[0],
                                                    agp.getCpf(),
                                                    agp.getPhone(),
                                                    idAgend,
                                                    findConfirmacoes(idAgend)});
                                    }

                                } catch (ParseException ex) {
                                    Logger.getLogger(ListaCalendario.class.getName()).log(Level.SEVERE, null, ex);
                                }

                            }
                        }
                    }
                }
            });
        } catch (InterruptedException | ExecutionException ex) {
            Logger.getLogger(ListaCalendario.class.getName()).log(Level.SEVERE, null, ex);
        }
        tabelaFunctions();
    }

    //por paciente e data
    private void carregaCalendario(Timestamp tsIni, Timestamp tsFim, String paciente) {
        this.TabelaAgenda.setModel(modeloTabela);

        //TabelaAgenda.setRowSorter(sorter);
        modeloTabela.addColumn("Nome");
        modeloTabela.addColumn("Responśavel");
        modeloTabela.addColumn("Data");
        modeloTabela.addColumn("Dia/Semana");
        modeloTabela.addColumn("Id");
        modeloTabela.addColumn("Telefone");
        modeloTabela.addColumn("Id Agendamento");
        modeloTabela.addColumn("Status");

        FireBaseClient fbc = new FireBaseClient();
        //asynchronously retrieve all documents
        ApiFuture<QuerySnapshot> future = fbc.FirebaseInt().collection("agendamentos")
                .whereEqualTo("nome", paciente.split(" ; ")[0])
                .get();
        // future.get() blocks on response
        List<QueryDocumentSnapshot> documents;

        try {
            documents = future.get().getDocuments();
            documents.forEach(new Consumer<QueryDocumentSnapshot>() {
                @Override
                public void accept(QueryDocumentSnapshot document) {
                    ModelAgendaPaciente agp = null;
                    if (document.exists()) {
                        // convert document to POJO
                        agp = document.toObject(ModelAgendaPaciente.class);
                        ArrayList<HashMap<String, Timestamp>> sessoes = agp.sessoes;
                        for (HashMap<String, Timestamp> hashMap : sessoes) {
                            for (String key : hashMap.keySet()) {
                                String dateFormated = new SimpleDateFormat("yyyy-MM-dd HH:mm").format(hashMap.get(key));
                                //intervalo das datas
                                if ((dateFormated.compareTo(tsIni.toString()) > 0 && dateFormated.compareTo(tsFim.toString()) < 0)) {
                                    String idAgend = key.split(" ; ")[4];

                                    String dateStr = key.split(" ; ")[0];
                                    Date dateSessao;
                                    Locale loc = new Locale("pt", "BR");
                                    try {
                                        DateFormat df = DateFormat.getDateInstance(FULL, loc);
                                        dateSessao = new SimpleDateFormat("dd-MM-yyyy - HH:mm").parse(dateStr);

                                        modeloTabela.addRow(
                                                new Object[]{
                                                    agp.getNome(),
                                                    key.split(" ; ")[1],
                                                    dateStr,
                                                    df.format(dateSessao).split(",")[0],
                                                    agp.getCpf(),
                                                    agp.getPhone(),
                                                    idAgend,
                                                    findConfirmacoes(idAgend)});

                                    } catch (ParseException ex) {
                                        Logger.getLogger(ListaCalendario.class.getName()).log(Level.SEVERE, null, ex);
                                    }

                                }

                            }
                        }
                    }
                }
            });
        } catch (InterruptedException | ExecutionException ex) {
            Logger.getLogger(ListaCalendario.class.getName()).log(Level.SEVERE, null, ex);
        }
        tabelaFunctions();

    }

    //paciente e status
    private void carregaCalendario(String paciente, String status, boolean b) {
        this.TabelaAgenda.setModel(modeloTabela);

        //TabelaAgenda.setRowSorter(sorter);
        modeloTabela.addColumn("Nome");
        modeloTabela.addColumn("Responśavel");
        modeloTabela.addColumn("Data");
        modeloTabela.addColumn("Dia/Semana");
        modeloTabela.addColumn("Id");
        modeloTabela.addColumn("Telefone");
        modeloTabela.addColumn("Id Agendamento");
        modeloTabela.addColumn("Status");

        FireBaseClient fbc = new FireBaseClient();
        //asynchronously retrieve all documents
        ApiFuture<QuerySnapshot> future = fbc.FirebaseInt().collection("agendamentos")
                .whereEqualTo("nome", paciente.split(" ; ")[0])
                .get();
        // future.get() blocks on response
        List<QueryDocumentSnapshot> documents;

        try {
            documents = future.get().getDocuments();
            documents.forEach(new Consumer<QueryDocumentSnapshot>() {
                @Override
                public void accept(QueryDocumentSnapshot document) {
                    ModelAgendaPaciente agp = null;
                    if (document.exists()) {
                        // convert document to POJO
                        agp = document.toObject(ModelAgendaPaciente.class);
                        ArrayList<HashMap<String, Timestamp>> sessoes = agp.sessoes;
                        for (HashMap<String, Timestamp> hashMap : sessoes) {
                            for (String key : hashMap.keySet()) {
                                String dateFormated = new SimpleDateFormat("yyyy-MM-dd HH:mm").format(hashMap.get(key));

                                String idAgend = key.split(" ; ")[4];
                                //status
                                if (findConfirmacoes(idAgend).equals(status)) {
                                    String dateStr = key.split(" ; ")[0];
                                    Date dateSessao;
                                    Locale loc = new Locale("pt", "BR");
                                    try {
                                        DateFormat df = DateFormat.getDateInstance(FULL, loc);
                                        dateSessao = new SimpleDateFormat("dd-MM-yyyy - HH:mm").parse(dateStr);

                                        modeloTabela.addRow(
                                                new Object[]{
                                                    agp.getNome(),
                                                    key.split(" ; ")[1],
                                                    dateStr,
                                                    df.format(dateSessao).split(",")[0],
                                                    agp.getCpf(),
                                                    agp.getPhone(),
                                                    idAgend,
                                                    findConfirmacoes(idAgend)});

                                    } catch (ParseException ex) {
                                        Logger.getLogger(ListaCalendario.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }

                            }
                        }
                    }
                }
            });
        } catch (InterruptedException | ExecutionException ex) {
            Logger.getLogger(ListaCalendario.class.getName()).log(Level.SEVERE, null, ex);
        }
        tabelaFunctions();
    }

    //reposnavel e data
    private void carregaCalendario(Timestamp tsIni, Timestamp tsFim, String resp, boolean b) {
        this.TabelaAgenda.setModel(modeloTabela);

        //TabelaAgenda.setRowSorter(sorter);
        modeloTabela.addColumn("Nome");
        modeloTabela.addColumn("Responśavel");
        modeloTabela.addColumn("Data");
        modeloTabela.addColumn("Dia/Semana");
        modeloTabela.addColumn("Id");
        modeloTabela.addColumn("Telefone");
        modeloTabela.addColumn("Id Agendamento");
        modeloTabela.addColumn("Status");

        FireBaseClient fbc = new FireBaseClient();
        //asynchronously retrieve all documents
        ApiFuture<QuerySnapshot> future = fbc.FirebaseInt().collection("agendamentos")
                .get();
        // future.get() blocks on response
        List<QueryDocumentSnapshot> documents;

        try {
            documents = future.get().getDocuments();
            documents.forEach(new Consumer<QueryDocumentSnapshot>() {
                @Override
                public void accept(QueryDocumentSnapshot document) {
                    ModelAgendaPaciente agp = null;
                    if (document.exists()) {
                        // convert document to POJO
                        agp = document.toObject(ModelAgendaPaciente.class);
                        ArrayList<HashMap<String, Timestamp>> sessoes = agp.sessoes;
                        for (HashMap<String, Timestamp> hashMap : sessoes) {
                            for (String key : hashMap.keySet()) {
                                String dateFormated = new SimpleDateFormat("yyyy-MM-dd HH:mm").format(hashMap.get(key));
                                //intervalo das datas
                                if ((dateFormated.compareTo(tsIni.toString()) > 0 && dateFormated.compareTo(tsFim.toString()) < 0)) {
                                    String idAgend = key.split(" ; ")[4];

                                    String dateStr = key.split(" ; ")[0];
                                    Date dateSessao;
                                    Locale loc = new Locale("pt", "BR");
                                    try {
                                        DateFormat df = DateFormat.getDateInstance(FULL, loc);
                                        dateSessao = new SimpleDateFormat("dd-MM-yyyy - HH:mm").parse(dateStr);
                                        if (resp.equals(key.split(" ; ")[1])) {
                                            modeloTabela.addRow(
                                                    new Object[]{
                                                        agp.getNome(),
                                                        key.split(" ; ")[1],
                                                        dateStr,
                                                        df.format(dateSessao).split(",")[0],
                                                        agp.getCpf(),
                                                        agp.getPhone(),
                                                        idAgend,
                                                        findConfirmacoes(idAgend)});
                                        }

                                    } catch (ParseException ex) {
                                        Logger.getLogger(ListaCalendario.class.getName()).log(Level.SEVERE, null, ex);
                                    }

                                }

                            }
                        }
                    }
                }
            });
        } catch (InterruptedException | ExecutionException ex) {
            Logger.getLogger(ListaCalendario.class.getName()).log(Level.SEVERE, null, ex);
        }
        tabelaFunctions();
    }

    //responsavel e status
    private void carregaCalendario(boolean b, String resp, String status) {
        this.TabelaAgenda.setModel(modeloTabela);

        //TabelaAgenda.setRowSorter(sorter);
        modeloTabela.addColumn("Nome");
        modeloTabela.addColumn("Responśavel");
        modeloTabela.addColumn("Data");
        modeloTabela.addColumn("Dia/Semana");
        modeloTabela.addColumn("Id");
        modeloTabela.addColumn("Telefone");
        modeloTabela.addColumn("Id Agendamento");
        modeloTabela.addColumn("Status");

        FireBaseClient fbc = new FireBaseClient();
        //asynchronously retrieve all documents
        ApiFuture<QuerySnapshot> future = fbc.FirebaseInt().collection("agendamentos")
                .get();
        // future.get() blocks on response
        List<QueryDocumentSnapshot> documents;

        try {
            documents = future.get().getDocuments();
            documents.forEach(new Consumer<QueryDocumentSnapshot>() {
                @Override
                public void accept(QueryDocumentSnapshot document) {
                    ModelAgendaPaciente agp = null;
                    if (document.exists()) {
                        // convert document to POJO
                        agp = document.toObject(ModelAgendaPaciente.class);
                        ArrayList<HashMap<String, Timestamp>> sessoes = agp.sessoes;
                        for (HashMap<String, Timestamp> hashMap : sessoes) {
                            for (String key : hashMap.keySet()) {
                                String dateFormated = new SimpleDateFormat("yyyy-MM-dd HH:mm").format(hashMap.get(key));

                                String idAgend = key.split(" ; ")[4];
                                //status
                                if (findConfirmacoes(idAgend).equals(status)) {
                                    String dateStr = key.split(" ; ")[0];
                                    Date dateSessao;
                                    Locale loc = new Locale("pt", "BR");
                                    try {
                                        DateFormat df = DateFormat.getDateInstance(FULL, loc);
                                        dateSessao = new SimpleDateFormat("dd-MM-yyyy - HH:mm").parse(dateStr);
                                        if (resp.equals(key.split(" ; ")[1])) {
                                            modeloTabela.addRow(
                                                    new Object[]{
                                                        agp.getNome(),
                                                        key.split(" ; ")[1],
                                                        dateStr,
                                                        df.format(dateSessao).split(",")[0],
                                                        agp.getCpf(),
                                                        agp.getPhone(),
                                                        idAgend,
                                                        findConfirmacoes(idAgend)});
                                        }

                                    } catch (ParseException ex) {
                                        Logger.getLogger(ListaCalendario.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }

                            }
                        }
                    }
                }
            });
        } catch (InterruptedException | ExecutionException ex) {
            Logger.getLogger(ListaCalendario.class.getName()).log(Level.SEVERE, null, ex);
        }
        tabelaFunctions();
    }

    //status e data
    private void carregaCalendario(boolean b, Timestamp tsIni, Timestamp tsFim, String status, boolean b0, boolean b1) {
        this.TabelaAgenda.setModel(modeloTabela);

        //TabelaAgenda.setRowSorter(sorter);
        modeloTabela.addColumn("Nome");
        modeloTabela.addColumn("Responśavel");
        modeloTabela.addColumn("Data");
        modeloTabela.addColumn("Dia/Semana");
        modeloTabela.addColumn("Id");
        modeloTabela.addColumn("Telefone");
        modeloTabela.addColumn("Id Agendamento");
        modeloTabela.addColumn("Status");

        FireBaseClient fbc = new FireBaseClient();
        //asynchronously retrieve all documents
        ApiFuture<QuerySnapshot> future = fbc.FirebaseInt().collection("agendamentos")
                .get();
        // future.get() blocks on response
        List<QueryDocumentSnapshot> documents;

        try {
            documents = future.get().getDocuments();
            documents.forEach(new Consumer<QueryDocumentSnapshot>() {
                @Override
                public void accept(QueryDocumentSnapshot document) {
                    ModelAgendaPaciente agp = null;
                    if (document.exists()) {
                        // convert document to POJO
                        agp = document.toObject(ModelAgendaPaciente.class);
                        ArrayList<HashMap<String, Timestamp>> sessoes = agp.sessoes;
                        for (HashMap<String, Timestamp> hashMap : sessoes) {
                            for (String key : hashMap.keySet()) {
                                String dateFormated = new SimpleDateFormat("yyyy-MM-dd HH:mm").format(hashMap.get(key));
                                //intervalo das datas
                                if ((dateFormated.compareTo(tsIni.toString()) > 0 && dateFormated.compareTo(tsFim.toString()) < 0)) {
                                    String idAgend = key.split(" ; ")[4];
                                    //status
                                    if (findConfirmacoes(idAgend).equals(status)) {
                                        String dateStr = key.split(" ; ")[0];
                                        Date dateSessao;
                                        Locale loc = new Locale("pt", "BR");
                                        try {
                                            DateFormat df = DateFormat.getDateInstance(FULL, loc);
                                            dateSessao = new SimpleDateFormat("dd-MM-yyyy - HH:mm").parse(dateStr);

                                            modeloTabela.addRow(
                                                    new Object[]{
                                                        agp.getNome(),
                                                        key.split(" ; ")[1],
                                                        dateStr,
                                                        df.format(dateSessao).split(",")[0],
                                                        agp.getCpf(),
                                                        agp.getPhone(),
                                                        idAgend,
                                                        findConfirmacoes(idAgend)});

                                        } catch (ParseException ex) {
                                            Logger.getLogger(ListaCalendario.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }

                                }

                            }
                        }
                    }
                }
            });
        } catch (InterruptedException | ExecutionException ex) {
            Logger.getLogger(ListaCalendario.class.getName()).log(Level.SEVERE, null, ex);
        }
        tabelaFunctions();
    }

    public static void openWebpage(String urlString) {
        try {
            Desktop.getDesktop().browse(new URL(urlString).toURI());
        } catch (IOException | URISyntaxException e) {
        }
    }

    private void initConfirmacoes() throws InterruptedException, ExecutionException {
        FireBaseClient fbcli = new FireBaseClient();
        ApiFuture<QuerySnapshot> query = fbcli.FirebaseInt().collection("confirmacoes").get();
        QuerySnapshot querySnapshot = query.get();
        List<QueryDocumentSnapshot> documents = querySnapshot.getDocuments();
        mdconf.clear();
        documents.forEach((QueryDocumentSnapshot document) -> {

            mdconf.add(document.toObject(ModelConfirmacoes.class));

        });
    }

    public String findConfirmacoes(String ident) {

        for (ModelConfirmacoes confObj : mdconf) {

            if (confObj.getIdent().equals(ident)) {

                return confObj.getAnsw();
            }
        }
        return "pendente";
    }

    private void tabelaFunctions() {
        //modeloTabela.addTableModelListener(TabelaAgenda);
        TabelaAgenda.addMouseListener(
                new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {

                }
                if (e.getClickCount() == 1) {
                    int reply;
                    reply = JOptionPane.showConfirmDialog(null, "Gostaria de Solcicitar a Confirmação?", "Confirmação Whatsapp", JOptionPane.YES_NO_OPTION);
                    if (reply == JOptionPane.YES_OPTION) {

                        int index = TabelaAgenda.getSelectedRow();
                        TableModel model = TabelaAgenda.getModel();
                        String phone = model.getValueAt(index, 5).toString();
                        String idAgend = model.getValueAt(index, 6).toString();
                        //https://us-central1-fisioapp-9cfc0.cloudfunctions.net/fisioApp?id=ff454545453123&answ=ok
                        Twilio tw = new Twilio();
                        String prefix = "55";
                        String data = model.getValueAt(index, 2).toString();
                        tw.SendMessage(prefix + phone, "CFRA - Confirma o agendamento :" + data, idAgend, "&answ=confirmado");
                        tw.SendMessage(prefix + phone, "CFRA - Cancelar a sessão? :" + data, idAgend, "&answ=cancelar");
                        JOptionPane.showMessageDialog(null, "Pedido de Conformação enviado!");
                        //String urlWhatsApp = "https://web.whatsapp.com/send?phone=55";
                        //String confirmar = "?text=Confirma%20a%20consulta?";
                        //String utlWhatsAppPhone = urlWhatsApp + phone + confirmar;
                        //System.out.println(utlWhatsAppPhone);
                        //openWebpage(utlWhatsAppPhone);
                    } else {
                        JOptionPane.showMessageDialog(null, "Pedido NÃO enviado!");
                        //dispose();
                    }

                }
            }
        }
        );

        //alterar a cor das linhas
        TabelaAgenda.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table,
                    Object value, boolean isSelected, boolean hasFocus, int row, int col) {

                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);

                String status = (String) table.getModel().getValueAt(row, 7);
                if ("Sem confirmação".equals(status)) {
                    setBackground(Color.GRAY);
                    setForeground(Color.YELLOW);
                } else if ("cancelar".equals(status)) {
                    setBackground(Color.GRAY);
                    setForeground(Color.RED);
                } else if ("confirmado".equals(status)) {
                    setBackground(Color.GRAY);
                    setForeground(Color.GREEN);
                } else {
                    setBackground(Color.lightGray);
                    setForeground(table.getForeground());
                }
                return this;
            }
        });

        //ocultando coluna ID
        TabelaAgenda.getColumn("Id").setPreferredWidth(0);
        TabelaAgenda.getColumn("Id").setMinWidth(0);
        TabelaAgenda.getColumn("Id").setWidth(0);
        TabelaAgenda.getColumn("Id").setMaxWidth(0);

        //ocultando colunda ID Agendamento
        TabelaAgenda.getColumn("Id Agendamento").setPreferredWidth(0);
        TabelaAgenda.getColumn("Id Agendamento").setMinWidth(0);
        TabelaAgenda.getColumn("Id Agendamento").setWidth(0);
        TabelaAgenda.getColumn("Id Agendamento").setMaxWidth(0);
    }
}
