/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MainPackage;

import com.google.api.core.ApiFuture;
import com.google.cloud.firestore.QueryDocumentSnapshot;
import com.google.cloud.firestore.QuerySnapshot;
import com.jidesoft.swing.ComboBoxSearchable;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author marcelo
 */
public class ListaCalendarioFilter extends javax.swing.JFrame {

    /**
     * Creates new form ListaCalendarioFilter
     *
     * @throws java.lang.InterruptedException
     * @throws java.util.concurrent.ExecutionException
     */
    public ListaCalendarioFilter() throws InterruptedException, ExecutionException {
        initComponents();
        initPacientes();
        initFuncionarios();
        initDate();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox3 = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        comboPaciente = new javax.swing.JComboBox<>();
        dataFim = new com.toedter.calendar.JDateChooser();
        dataIni = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnVoltar = new javax.swing.JButton();
        btnConfirmar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        comboResponsavel = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        comboStatus = new javax.swing.JComboBox<>();

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CFRA - Agendamentos");

        comboPaciente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("Nome Paciente:");

        jLabel3.setText("Data Início:");

        jLabel2.setText("Profissional:");

        btnVoltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/voltar.png"))); // NOI18N
        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        btnConfirmar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/confirmar.png"))); // NOI18N
        btnConfirmar.setText("Confirmar");
        btnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarActionPerformed(evt);
            }
        });

        jLabel4.setText("Data Fim:");

        comboResponsavel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel5.setText("Status:");

        comboStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Confirmados", "Cancelados", "Sem Confirmação" }));

        jDesktopPane1.setLayer(comboPaciente, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(dataFim, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(dataIni, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(btnVoltar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(btnConfirmar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(comboResponsavel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(comboStatus, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(comboStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboPaciente, 0, 277, Short.MAX_VALUE)
                    .addComponent(comboResponsavel, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(dataFim, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                        .addComponent(dataIni, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(81, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnVoltar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnConfirmar)
                .addGap(30, 30, 30))
        );

        jDesktopPane1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {comboPaciente, comboResponsavel});

        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboPaciente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(comboResponsavel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dataIni, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dataFim, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(comboStatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConfirmar)
                    .addComponent(btnVoltar))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jDesktopPane1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {comboPaciente, comboResponsavel, comboStatus, dataFim, dataIni});

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarActionPerformed
        //todos - sem filtros
        if ("Todos".equals(comboPaciente.getSelectedItem().toString())
                && "Todos".equals(comboResponsavel.getSelectedItem().toString())
                && "Todos".equals(comboStatus.getSelectedItem().toString())
                && dataFim.getDate().toString().equals(dataIni.getDate().toString())) {
            ListaCalendario lstCal;
            try {
                lstCal = new ListaCalendario();
                lstCal.setVisible(true);

            } catch (InterruptedException | ExecutionException ex) {
                Logger.getLogger(ListaCalendarioFilter.class.getName()).log(Level.SEVERE, null, ex);
            }
            //verificar paciente
        } else if (!"Todos".equals(comboPaciente.getSelectedItem().toString())
                && "Todos".equals(comboResponsavel.getSelectedItem().toString())
                && "Todos".equals(comboStatus.getSelectedItem().toString())
                && dataFim.getDate().toString().equals(dataIni.getDate().toString())) {

            String paciente = comboPaciente.getSelectedItem().toString();
            ListaCalendario lstCal;
            try {
                lstCal = new ListaCalendario(paciente);
                lstCal.setVisible(true);
            } catch (InterruptedException | ExecutionException ex) {
                Logger.getLogger(ListaCalendarioFilter.class.getName()).log(Level.SEVERE, null, ex);
            }
            //pelo responsável
        } else if ("Todos".equals(comboPaciente.getSelectedItem().toString())
                && !"Todos".equals(comboResponsavel.getSelectedItem().toString())
                && "Todos".equals(comboStatus.getSelectedItem().toString())
                && dataFim.getDate().toString().equals(dataIni.getDate().toString())) {

            String resp = comboResponsavel.getSelectedItem().toString();
            ListaCalendario lstCal;
            try {
                lstCal = new ListaCalendario(resp, true);
                lstCal.setVisible(true);
            } catch (InterruptedException | ExecutionException ex) {
                Logger.getLogger(ListaCalendarioFilter.class.getName()).log(Level.SEVERE, null, ex);
            }
            //por data
        } else if ("Todos".equals(comboPaciente.getSelectedItem().toString())
                && "Todos".equals(comboResponsavel.getSelectedItem().toString())
                && "Todos".equals(comboStatus.getSelectedItem().toString())
                && !dataFim.getDate().toString().equals(dataIni.getDate().toString())) {

            java.util.Date dIni = dataIni.getDate();
            Calendar calIni = Calendar.getInstance();
            calIni.setTime(dIni);
            calIni.set(Calendar.MILLISECOND, 0);
            Timestamp tsIni = new Timestamp(calIni.getTimeInMillis());

            java.util.Date dFim = dataFim.getDate();
            Calendar calFim = Calendar.getInstance();
            calFim.setTime(dFim);
            calFim.set(Calendar.MILLISECOND, 0);
            Timestamp tsFim = new Timestamp(calFim.getTimeInMillis());

            ListaCalendario lstCal;
            try {
                lstCal = new ListaCalendario(tsIni, tsFim);
                lstCal.setVisible(true);

            } catch (InterruptedException | ExecutionException ex) {
                Logger.getLogger(ListaCalendarioFilter.class.getName()).log(Level.SEVERE, null, ex);
            }
            //por status
        } else if ("Todos".equals(comboPaciente.getSelectedItem().toString())
                && "Todos".equals(comboResponsavel.getSelectedItem().toString())
                && !"Todos".equals(comboStatus.getSelectedItem().toString())
                && dataFim.getDate().toString().equals(dataIni.getDate().toString())) {

            String status = comboStatus.getSelectedItem().toString();
            if ("Confirmados".equals(status)) {
                status = "ok";
            } else if ("Cancelados".equals(status)) {
                status = "cancelar";
            } else if ("Sem Confirmação".equals(status)) {
                status = "pendente";
            }
            ListaCalendario lstCal;
            try {
                lstCal = new ListaCalendario(true, status);
                lstCal.setVisible(true);

            } catch (InterruptedException | ExecutionException ex) {
                Logger.getLogger(ListaCalendarioFilter.class.getName()).log(Level.SEVERE, null, ex);
            }
            //por paciente e responsável
        } else if (!"Todos".equals(comboPaciente.getSelectedItem().toString())
                && !"Todos".equals(comboResponsavel.getSelectedItem().toString())
                && "Todos".equals(comboStatus.getSelectedItem().toString())
                && dataFim.getDate().toString().equals(dataIni.getDate().toString())) {

            String paciente = comboPaciente.getSelectedItem().toString();
            String resp = comboResponsavel.getSelectedItem().toString();

            ListaCalendario lstCal;
            try {
                lstCal = new ListaCalendario(paciente, resp);
                lstCal.setVisible(true);

            } catch (InterruptedException | ExecutionException ex) {
                Logger.getLogger(ListaCalendarioFilter.class.getName()).log(Level.SEVERE, null, ex);
            }
            //por paciente e data
        } else if (!"Todos".equals(comboPaciente.getSelectedItem().toString())
                && "Todos".equals(comboResponsavel.getSelectedItem().toString())
                && "Todos".equals(comboStatus.getSelectedItem().toString())
                && !dataFim.getDate().toString().equals(dataIni.getDate().toString())) {
            java.util.Date dIni = dataIni.getDate();
            Calendar calIni = Calendar.getInstance();
            calIni.setTime(dIni);
            calIni.set(Calendar.MILLISECOND, 0);
            Timestamp tsIni = new Timestamp(calIni.getTimeInMillis());

            java.util.Date dFim = dataFim.getDate();
            Calendar calFim = Calendar.getInstance();
            calFim.setTime(dFim);
            calFim.set(Calendar.MILLISECOND, 0);
            Timestamp tsFim = new Timestamp(calFim.getTimeInMillis());

            String paciente = comboPaciente.getSelectedItem().toString();

            ListaCalendario lstCal;
            try {
                lstCal = new ListaCalendario(tsIni, tsFim, paciente);
                lstCal.setVisible(true);

            } catch (InterruptedException | ExecutionException ex) {
                Logger.getLogger(ListaCalendarioFilter.class.getName()).log(Level.SEVERE, null, ex);
            }
            //por paciente e status
        } else if (!"Todos".equals(comboPaciente.getSelectedItem().toString())
                && "Todos".equals(comboResponsavel.getSelectedItem().toString())
                && !"Todos".equals(comboStatus.getSelectedItem().toString())
                && dataFim.getDate().toString().equals(dataIni.getDate().toString())) {

            String paciente = comboPaciente.getSelectedItem().toString();
            String status = comboStatus.getSelectedItem().toString();
            if ("Confirmados".equals(status)) {
                status = "ok";
            } else if ("Cancelados".equals(status)) {
                status = "cancelar";
            } else if ("Sem Confirmação".equals(status)) {
                status = "pendente";
            }
            ListaCalendario lstCal;
            try {
                lstCal = new ListaCalendario(paciente, status, true);
                lstCal.setVisible(true);

            } catch (InterruptedException | ExecutionException ex) {
                Logger.getLogger(ListaCalendarioFilter.class.getName()).log(Level.SEVERE, null, ex);
            }
            //responsável e data
        } else if ("Todos".equals(comboPaciente.getSelectedItem().toString())
                && !"Todos".equals(comboResponsavel.getSelectedItem().toString())
                && "Todos".equals(comboStatus.getSelectedItem().toString())
                && !dataFim.getDate().toString().equals(dataIni.getDate().toString())) {
            java.util.Date dIni = dataIni.getDate();
            Calendar calIni = Calendar.getInstance();
            calIni.setTime(dIni);
            calIni.set(Calendar.MILLISECOND, 0);
            Timestamp tsIni = new Timestamp(calIni.getTimeInMillis());

            java.util.Date dFim = dataFim.getDate();
            Calendar calFim = Calendar.getInstance();
            calFim.setTime(dFim);
            calFim.set(Calendar.MILLISECOND, 0);
            Timestamp tsFim = new Timestamp(calFim.getTimeInMillis());

            String resp = comboResponsavel.getSelectedItem().toString();

            ListaCalendario lstCal;
            try {
                lstCal = new ListaCalendario(tsIni, tsFim, resp, true);
                lstCal.setVisible(true);

            } catch (InterruptedException | ExecutionException ex) {
                Logger.getLogger(ListaCalendarioFilter.class.getName()).log(Level.SEVERE, null, ex);
            }
            //responsável e status
        } else if ("Todos".equals(comboPaciente.getSelectedItem().toString())
                && !"Todos".equals(comboResponsavel.getSelectedItem().toString())
                && !"Todos".equals(comboStatus.getSelectedItem().toString())
                && dataFim.getDate().toString().equals(dataIni.getDate().toString())) {

            String resp = comboResponsavel.getSelectedItem().toString();
            String status = comboStatus.getSelectedItem().toString();
            if ("Confirmados".equals(status)) {
                status = "ok";
            } else if ("Cancelados".equals(status)) {
                status = "cancelar";
            } else if ("Sem Confirmação".equals(status)) {
                status = "pendente";
            }
            ListaCalendario lstCal;
            try {
                lstCal = new ListaCalendario(true, resp, status);
                lstCal.setVisible(true);

            } catch (InterruptedException | ExecutionException ex) {
                Logger.getLogger(ListaCalendarioFilter.class.getName()).log(Level.SEVERE, null, ex);
            }
            //status e data
        } else if ("Todos".equals(comboPaciente.getSelectedItem().toString())
                && "Todos".equals(comboResponsavel.getSelectedItem().toString())
                && !"Todos".equals(comboStatus.getSelectedItem().toString())
                && !dataFim.getDate().toString().equals(dataIni.getDate().toString())) {
            java.util.Date dIni = dataIni.getDate();
            Calendar calIni = Calendar.getInstance();
            calIni.setTime(dIni);
            calIni.set(Calendar.MILLISECOND, 0);
            Timestamp tsIni = new Timestamp(calIni.getTimeInMillis());

            java.util.Date dFim = dataFim.getDate();
            Calendar calFim = Calendar.getInstance();
            calFim.setTime(dFim);
            calFim.set(Calendar.MILLISECOND, 0);
            Timestamp tsFim = new Timestamp(calFim.getTimeInMillis());

            String status = comboStatus.getSelectedItem().toString();
            if ("Confirmados".equals(status)) {
                status = "ok";
            } else if ("Cancelados".equals(status)) {
                status = "cancelar";
            } else if ("Sem Confirmação".equals(status)) {
                status = "pendente";
            }
            ListaCalendario lstCal;
            try {
                lstCal = new ListaCalendario(true, tsIni, tsFim, status, true, true);
                lstCal.setVisible(true);

            } catch (InterruptedException | ExecutionException ex) {
                Logger.getLogger(ListaCalendarioFilter.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            java.util.Date dIni = dataIni.getDate();
            Calendar calIni = Calendar.getInstance();
            calIni.setTime(dIni);
            calIni.set(Calendar.MILLISECOND, 0);
            Timestamp tsIni = new Timestamp(calIni.getTimeInMillis());

            java.util.Date dFim = dataFim.getDate();
            Calendar calFim = Calendar.getInstance();
            calFim.setTime(dFim);
            calFim.set(Calendar.MILLISECOND, 0);
            Timestamp tsFim = new Timestamp(calFim.getTimeInMillis());

            String paciente = comboPaciente.getSelectedItem().toString();
            String resp = comboResponsavel.getSelectedItem().toString();
            String status = comboStatus.getSelectedItem().toString();
            if ("Confirmados".equals(status)) {
                status = "ok";
            } else if ("Cancelados".equals(status)) {
                status = "cancelar";
            } else if ("Sem Confirmação".equals(status)) {
                status = "pendente";
            }
            ListaCalendario lstCal;
            try {
                lstCal = new ListaCalendario(tsIni, tsFim, paciente, resp, status);
                lstCal.setVisible(true);

            } catch (InterruptedException | ExecutionException ex) {
                Logger.getLogger(ListaCalendarioFilter.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_btnConfirmarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListaCalendarioFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListaCalendarioFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListaCalendarioFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListaCalendarioFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new ListaCalendarioFilter().setVisible(true);
            } catch (InterruptedException | ExecutionException ex) {
                Logger.getLogger(ListaCalendarioFilter.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirmar;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JComboBox<String> comboPaciente;
    private javax.swing.JComboBox<String> comboResponsavel;
    private javax.swing.JComboBox<String> comboStatus;
    private com.toedter.calendar.JDateChooser dataFim;
    private com.toedter.calendar.JDateChooser dataIni;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    private void initPacientes() throws InterruptedException, ExecutionException {
        FireBaseClient fbcli = new FireBaseClient();

        ApiFuture<QuerySnapshot> query = fbcli.FirebaseInt().collection("pacientes").get();
        QuerySnapshot querySnapshot = query.get();
        List<QueryDocumentSnapshot> documents = querySnapshot.getDocuments();
        comboPaciente.removeAllItems();
        comboPaciente.addItem("Todos");
        documents.forEach((document) -> {

            String nome = document.toObject(ModelPaciente.class).getnome();
            String cpf = document.toObject(ModelPaciente.class).getcpf();
            String combo = nome + " ; " + cpf;
            //mdp.add(document.toObject(ModelPaciente.class));
            comboPaciente.addItem(combo);

        });

        ComboBoxSearchable searchable = new ComboBoxSearchable(comboPaciente);
    }

    private void initFuncionarios() throws InterruptedException, ExecutionException {

        FireBaseClient fbcli = new FireBaseClient();
        ApiFuture<QuerySnapshot> query = fbcli.FirebaseInt().collection("funcionarios").get();
        QuerySnapshot querySnapshot = query.get();
        List<QueryDocumentSnapshot> documents = querySnapshot.getDocuments();
        comboResponsavel.removeAllItems();
        comboResponsavel.addItem("Todos");
        documents.forEach((QueryDocumentSnapshot document) -> {
            String func = document.toObject(ModelCadastroFunc.class).getNomeFunc();
            //mdfunc.add(document.toObject(ModelCadastroFunc.class));
            comboResponsavel.addItem(func);
        });
    }

    private void initDate() {
        Date date = new Date();
        dataIni.setDate(date);
        dataFim.setDate(date);

    }

}
