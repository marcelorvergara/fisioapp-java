/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MainPackage;

import com.google.api.core.ApiFuture;
import com.google.cloud.Timestamp;
import com.google.cloud.firestore.DocumentReference;
import com.google.cloud.firestore.DocumentSnapshot;
import com.google.cloud.firestore.QueryDocumentSnapshot;
import com.google.cloud.firestore.QuerySnapshot;
import com.google.cloud.firestore.WriteResult;
import java.awt.Component;
import java.util.Calendar;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author marcelo
 */
public class EvolucaoDiariaForm extends javax.swing.JFrame {

    ModelPaciente mdlp;

    /**
     * Creates new form EvolucaoDiariaForm
     */
    public EvolucaoDiariaForm() {
        initComponents();
    }

    public EvolucaoDiariaForm(ModelPaciente pacienteObj) throws InterruptedException, ExecutionException {
        initComponents();
        initComboFunc();
        String nomePac = pacienteObj.getnome();
        String cpfPac = pacienteObj.getcpf();
        txtNomePaciente.setText(nomePac + " / " + cpfPac);
        mdlp = pacienteObj;
        edtAtualizaEvo.setVisible(false);
        initTextAreas();
        txtIdEvo.setVisible(false);
    }

    public EvolucaoDiariaForm(String idEvo, boolean b) throws InterruptedException, ExecutionException {
        initComponents();
        initComboFunc();
        btnGuardarEvolucao.setVisible(false);
        initFields(idEvo);
        initTextAreas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        edtImpPAciente = new javax.swing.JTextArea();
        txtIdEvo = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtNomePaciente = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnVoltar = new javax.swing.JButton();
        comboFunc = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        edtTratReal = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        edtData = new com.toedter.calendar.JDateChooser();
        btnGuardarEvolucao = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        edtImpTerapeuta = new javax.swing.JTextArea();
        edtAtualizaEvo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CFRA - Ficha de Evolução Diária");

        jLabel4.setText("Impressão do Terapeuta:");

        edtImpPAciente.setColumns(20);
        edtImpPAciente.setRows(5);
        jScrollPane1.setViewportView(edtImpPAciente);

        txtIdEvo.setText("id Evolucao");

        jLabel5.setText("Profissional:");

        txtNomePaciente.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtNomePaciente.setText("Nome");

        jLabel2.setText("Impressão do Paciente:");

        btnVoltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/voltar.png"))); // NOI18N
        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        comboFunc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Tratamento Realizado:");

        edtTratReal.setColumns(20);
        edtTratReal.setRows(5);
        jScrollPane2.setViewportView(edtTratReal);

        jLabel1.setText("Data:");

        btnGuardarEvolucao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/save.png"))); // NOI18N
        btnGuardarEvolucao.setText("Guardar Evolução");
        btnGuardarEvolucao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarEvolucaoActionPerformed(evt);
            }
        });

        edtImpTerapeuta.setColumns(20);
        edtImpTerapeuta.setRows(5);
        jScrollPane3.setViewportView(edtImpTerapeuta);

        edtAtualizaEvo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/save.png"))); // NOI18N
        edtAtualizaEvo.setText("Atualizar Evolução");
        edtAtualizaEvo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edtAtualizaEvoActionPerformed(evt);
            }
        });

        jDesktopPane1.setLayer(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(txtIdEvo, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(txtNomePaciente, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(btnVoltar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(comboFunc, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(edtData, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(btnGuardarEvolucao, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(edtAtualizaEvo, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane1Layout.createSequentialGroup()
                        .addComponent(txtIdEvo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 180, Short.MAX_VALUE)
                        .addComponent(btnVoltar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edtAtualizaEvo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGuardarEvolucao))
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(edtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboFunc, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtNomePaciente))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jDesktopPane1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnGuardarEvolucao, edtAtualizaEvo});

        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(edtData, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(comboFunc, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtNomePaciente)
                .addGap(14, 14, 14)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 58, Short.MAX_VALUE)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtIdEvo, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnVoltar, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(edtAtualizaEvo, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnGuardarEvolucao, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnGuardarEvolucaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarEvolucaoActionPerformed

        ModelEvolucaoDiaria med = new ModelEvolucaoDiaria();
        med.setNome(txtNomePaciente.getText().split(" / ")[0]);
        med.setCpf(mdlp.getcpf());
        med.setResponsavel(comboFunc.getSelectedItem().toString());
        java.util.Date data;
        data = edtData.getDate();
        if ("Selecione o Responsável".equals(comboFunc.getSelectedItem().toString())
                || data == null
                || "".equals(edtImpPAciente.getText())
                || "".equals(edtTratReal.getText())
                || "".equals(edtImpTerapeuta.getText())) {
            Component frame = null;
            JOptionPane.showMessageDialog(frame,
                    "Verifique se as informações");
        } else {
            Calendar cal = Calendar.getInstance();
            cal.setTime(data);
            cal.set(Calendar.MILLISECOND, 0);
            med.setData(Timestamp.of(data));
            med.setimpPaciente(edtImpPAciente.getText());
            med.settratamentoReal(edtTratReal.getText());
            med.setimpTerapeuta(edtImpTerapeuta.getText());
            //id para o documenti
            String uuid = java.util.UUID.randomUUID().toString();
            med.setIdEvo(uuid);

            FireBaseClient fbcli = new FireBaseClient();
            DocumentReference docRef;
            docRef = fbcli.FirebaseInt().collection("evolucaodiaria").document(uuid);
            ApiFuture<WriteResult> result = docRef.set(med);
            try {
                System.out.println("Update time : " + result.get().getUpdateTime());
                Component frame = null;
                JOptionPane.showMessageDialog(frame,
                        "Evolução inserida com sucesso!");

            } catch (InterruptedException | ExecutionException ex) {
                Logger.getLogger(Anamnese.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.dispose();
        }

    }//GEN-LAST:event_btnGuardarEvolucaoActionPerformed

    private void edtAtualizaEvoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edtAtualizaEvoActionPerformed
        ModelEvolucaoDiaria med = new ModelEvolucaoDiaria();
        String nomePac = txtNomePaciente.getText().split(" / ")[0];
        String cpfPac = txtNomePaciente.getText().split(" / ")[1];
        med.setNome(nomePac);
        med.setCpf(cpfPac);
        med.setResponsavel(comboFunc.getSelectedItem().toString());
        med.setIdEvo(txtIdEvo.getText());
        java.util.Date data;
        data = edtData.getDate();
        Calendar cal = Calendar.getInstance();
        cal.setTime(data);
        cal.set(Calendar.MILLISECOND, 0);
        med.setData(Timestamp.of(data));
        med.setimpPaciente(edtImpPAciente.getText());
        med.settratamentoReal(edtTratReal.getText());
        med.setimpTerapeuta(edtImpTerapeuta.getText());

        FireBaseClient fbcli = new FireBaseClient();
        DocumentReference docRef;
        docRef = fbcli.FirebaseInt().collection("evolucaodiaria").document(txtIdEvo.getText());
        ApiFuture<WriteResult> result = docRef.set(med);
        try {
            System.out.println("Update time : " + result.get().getUpdateTime());
            Component frame = null;
            JOptionPane.showMessageDialog(frame,
                    "Evolução atualizada com sucesso!");

        } catch (InterruptedException | ExecutionException ex) {
            Logger.getLogger(Anamnese.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.dispose();
    }//GEN-LAST:event_edtAtualizaEvoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EvolucaoDiariaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EvolucaoDiariaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EvolucaoDiariaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EvolucaoDiariaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EvolucaoDiariaForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuardarEvolucao;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JComboBox<String> comboFunc;
    private javax.swing.JButton edtAtualizaEvo;
    private com.toedter.calendar.JDateChooser edtData;
    private javax.swing.JTextArea edtImpPAciente;
    private javax.swing.JTextArea edtImpTerapeuta;
    private javax.swing.JTextArea edtTratReal;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel txtIdEvo;
    private javax.swing.JLabel txtNomePaciente;
    // End of variables declaration//GEN-END:variables

    private void initComboFunc() throws InterruptedException, ExecutionException {
        FireBaseClient fbcli = new FireBaseClient();
        ApiFuture<QuerySnapshot> query = fbcli.FirebaseInt().collection("funcionarios").get();
        QuerySnapshot querySnapshot = query.get();
        List<QueryDocumentSnapshot> documents = querySnapshot.getDocuments();
        comboFunc.removeAllItems();
        comboFunc.addItem("Selecione o Responsável");
        documents.forEach((QueryDocumentSnapshot document) -> {
            String procedimento = document.toObject(ModelCadastroFunc.class).getNomeFunc();
            comboFunc.addItem(procedimento);
        });
    }

    private void initFields(String idEvo) {
        txtIdEvo.setText(idEvo);
        FireBaseClient fbc = new FireBaseClient();
        DocumentReference docRef = fbc.FirebaseInt().collection("evolucaodiaria").document(idEvo);
        try {
            ApiFuture<DocumentSnapshot> future = docRef.get();
            DocumentSnapshot document = future.get();
            ModelEvolucaoDiaria mdlEvo = null;
            if (document.exists()) {
                // convert document to POJO
                mdlEvo = document.toObject(ModelEvolucaoDiaria.class);

                Timestamp tsss = mdlEvo.getData();
                edtData.setDate(tsss.toDate());

                comboFunc.setSelectedItem(mdlEvo.getResponsavel());
                String nomePac = mdlEvo.getNome();
                String cpfPac = mdlEvo.getCpf();
                txtNomePaciente.setText(nomePac + " / " + cpfPac);
                edtImpPAciente.setText(mdlEvo.getimpPaciente());
                edtTratReal.setText(mdlEvo.gettratamentoReal());
                edtImpTerapeuta.setText(mdlEvo.getimpTerapeuta());

            } else {
                System.out.println("No such document!");
            }

        } catch (InterruptedException | ExecutionException ex) {
            Logger.getLogger(EvolucaoDiariaLista.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void initTextAreas() {
        edtImpPAciente.setWrapStyleWord(true);
        edtTratReal.setWrapStyleWord(true);
        edtImpTerapeuta.setWrapStyleWord(true);

        edtImpPAciente.setLineWrap(true);
        edtTratReal.setLineWrap(true);
        edtImpTerapeuta.setLineWrap(true);
    }
}
