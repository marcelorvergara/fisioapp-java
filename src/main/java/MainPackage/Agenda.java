/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MainPackage;

import com.google.api.client.util.DateTime;

import com.google.api.core.ApiFuture;
import com.google.api.services.calendar.model.Event;
import com.google.api.services.calendar.model.EventAttendee;
import com.google.api.services.calendar.model.EventDateTime;
import com.google.api.services.calendar.model.EventReminder;
import com.google.cloud.firestore.DocumentReference;
import com.google.cloud.firestore.DocumentSnapshot;
import com.google.cloud.firestore.QueryDocumentSnapshot;
import com.google.cloud.firestore.QuerySnapshot;
import com.google.cloud.firestore.SetOptions;
import com.google.cloud.firestore.WriteResult;
import java.awt.Component;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.util.Date;

/**
 *
 * @author marcelo
 */
public class Agenda extends javax.swing.JFrame {

    ModelPaciente pacienteObj;
    ArrayList<String> sessoesLista = new ArrayList<>();
    ArrayList<ModelCadastroFunc> mdfunc = new ArrayList<>();

    /**
     * Creates new form Agenda
     *
     * @throws java.io.IOException
     * @throws java.io.FileNotFoundException
     * @throws java.lang.InterruptedException
     * @throws java.util.concurrent.ExecutionException
     */
    Agenda(ModelPaciente paciObj) throws InterruptedException, ExecutionException {
        initComponents();
        initComboBoxSalas();
        initComboProc();
        initComboFunc();
        pacienteObj = paciObj;
        initFrame();
        edtAgendamento.setEditable(false);
    }

    private Agenda() throws InterruptedException, ExecutionException {
        initComponents();
        initComboBoxSalas();
        initComboProc();
        initComboFunc();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopAgendamento = new javax.swing.JDesktopPane();
        txtData = new javax.swing.JLabel();
        txtHora = new javax.swing.JLabel();
        btnInserirSessao = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        edtAgendamento = new javax.swing.JTextArea();
        edtData = new com.toedter.calendar.JDateChooser();
        btnConfirmarAgendamento = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        comboSalas = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        comboProc = new javax.swing.JComboBox<>();
        comboFunc = new javax.swing.JComboBox<>();
        comboHoraInicio = new javax.swing.JComboBox<>();
        comboHoraFim = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        comboMinInicio = new javax.swing.JComboBox<>();
        comboMinFim = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        btnVoltar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        edtAgendaNew = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CFRA - Agendamentos");

        jDesktopAgendamento.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jDesktopAgendamento.setPreferredSize(new java.awt.Dimension(650, 350));

        txtData.setText("Data:");

        txtHora.setText("Hora Início:");

        btnInserirSessao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/down.png"))); // NOI18N
        btnInserirSessao.setText("Inserir Sessão");
        btnInserirSessao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInserirSessaoActionPerformed(evt);
            }
        });

        edtAgendamento.setColumns(20);
        edtAgendamento.setRows(5);
        jScrollPane1.setViewportView(edtAgendamento);

        btnConfirmarAgendamento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/confirmar.png"))); // NOI18N
        btnConfirmarAgendamento.setText("Confirmar");
        btnConfirmarAgendamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarAgendamentoActionPerformed(evt);
            }
        });

        jLabel3.setText("Profissional:");

        jLabel4.setText("Datas e Horários Agendados:");

        jLabel2.setText("Hora Fim:");

        jLabel5.setText("Sala:");

        comboSalas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sala Principal", "Sala 1", "Sala 2", "Sala 3" }));

        jLabel6.setText("Procedimento:");

        comboProc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        comboFunc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        comboHoraInicio.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22" }));

        comboHoraFim.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));

        jLabel7.setText("H");

        jLabel8.setText("H");

        comboMinInicio.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "05", "10", "15", "20", "25", "30", "35", "40", "45", "50", "55", " " }));

        comboMinFim.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "05", "10", "15", "20", "25", "30", "35", "40", "45", "50", "55" }));

        jLabel9.setText("Min");

        jLabel10.setText("Min");

        jLabel11.setText("Novos Agendamentos:");

        btnVoltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/voltar.png"))); // NOI18N
        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        edtAgendaNew.setColumns(20);
        edtAgendaNew.setRows(5);
        jScrollPane2.setViewportView(edtAgendaNew);

        jDesktopAgendamento.setLayer(txtData, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopAgendamento.setLayer(txtHora, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopAgendamento.setLayer(btnInserirSessao, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopAgendamento.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopAgendamento.setLayer(edtData, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopAgendamento.setLayer(btnConfirmarAgendamento, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopAgendamento.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopAgendamento.setLayer(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopAgendamento.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopAgendamento.setLayer(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopAgendamento.setLayer(comboSalas, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopAgendamento.setLayer(jLabel6, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopAgendamento.setLayer(comboProc, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopAgendamento.setLayer(comboFunc, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopAgendamento.setLayer(comboHoraInicio, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopAgendamento.setLayer(comboHoraFim, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopAgendamento.setLayer(jLabel7, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopAgendamento.setLayer(jLabel8, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopAgendamento.setLayer(comboMinInicio, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopAgendamento.setLayer(comboMinFim, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopAgendamento.setLayer(jLabel9, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopAgendamento.setLayer(jLabel10, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopAgendamento.setLayer(jLabel11, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopAgendamento.setLayer(btnVoltar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopAgendamento.setLayer(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopAgendamentoLayout = new javax.swing.GroupLayout(jDesktopAgendamento);
        jDesktopAgendamento.setLayout(jDesktopAgendamentoLayout);
        jDesktopAgendamentoLayout.setHorizontalGroup(
            jDesktopAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopAgendamentoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDesktopAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jDesktopAgendamentoLayout.createSequentialGroup()
                        .addGroup(jDesktopAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel11)
                            .addGroup(jDesktopAgendamentoLayout.createSequentialGroup()
                                .addGroup(jDesktopAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtData)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jDesktopAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboProc, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboFunc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboSalas, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(edtData, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jDesktopAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(txtHora))
                                .addGap(91, 91, 91)
                                .addGroup(jDesktopAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboHoraFim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboHoraInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jDesktopAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jDesktopAgendamentoLayout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(comboMinInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel9))
                                    .addGroup(jDesktopAgendamentoLayout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(comboMinFim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel10))))
                            .addComponent(btnInserirSessao))
                        .addGap(0, 44, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopAgendamentoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnVoltar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnConfirmarAgendamento, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jDesktopAgendamentoLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {comboFunc, comboProc});

        jDesktopAgendamentoLayout.setVerticalGroup(
            jDesktopAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopAgendamentoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDesktopAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtData, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(edtData, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHora, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(comboHoraInicio, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(comboMinInicio, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDesktopAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(comboSalas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(comboHoraFim, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(comboMinFim, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDesktopAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(comboFunc, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jDesktopAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboProc, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addComponent(btnInserirSessao)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDesktopAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnVoltar)
                    .addComponent(btnConfirmarAgendamento))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jDesktopAgendamentoLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {comboFunc, comboProc, comboSalas, edtData});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopAgendamento, javax.swing.GroupLayout.PREFERRED_SIZE, 753, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopAgendamento, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnInserirSessaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInserirSessaoActionPerformed

        if ("Selecione o responsável".equals(comboFunc.getSelectedItem().toString()) || "Selecione o procedimento".equals(comboProc.getSelectedItem().toString()) || "Selecione a Sala".equals(comboSalas.getSelectedItem().toString())) {
            Component frame = null;
            JOptionPane.showMessageDialog(frame,
                    "Verifique os campos selecionados");
        } else {
            if ("Paciente sem agendamentos".equals(edtAgendamento.getText())) {
                edtAgendamento.setText("");
            }
            final DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
            Date dataAgendamento = edtData.getDate();
            String resp = comboFunc.getSelectedItem().toString();

            Timestamp ts = new Timestamp(dataAgendamento.getTime());

            //criação do event id para google agenda
            String eveId;
            eveId = java.util.UUID.randomUUID().toString();

            String horaInicio = comboHoraInicio.getSelectedItem().toString() + ":" + comboMinInicio.getSelectedItem().toString();
            String horaFim = comboHoraFim.getSelectedItem().toString() + ":" + comboMinFim.getSelectedItem().toString();
            String horaAgendamento = horaInicio;
            String horaAgendamentoFim = horaFim;
            String salaSessao = comboSalas.getSelectedItem().toString();
            String agendamentoStr = df.format(dataAgendamento) + " - " + horaAgendamento + "/" + horaAgendamentoFim;
            if (horaAgendamento.matches("([0-9]{2}):([0-9]{2})") && horaAgendamentoFim.matches("([0-9]{2}):([0-9]{2})")) {
                edtAgendaNew.append(agendamentoStr + " ; " + resp + " ; " + ts + " ; " + salaSessao + " ; " + eveId.replace("-", "") + "\n");
            } else {
                Component frame = null;
                JOptionPane.showMessageDialog(frame,
                        "Formato do horário deve ser HH:MM");
            }

        }

    }//GEN-LAST:event_btnInserirSessaoActionPerformed

    private void btnConfirmarAgendamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarAgendamentoActionPerformed
        if ("Selecione a Sala".equals(comboSalas.getSelectedItem().toString())
                || "Selecione o procedimento".equals(comboProc.getSelectedItem().toString())
                || "Selecione o responsável".equals(comboFunc.getSelectedItem().toString())) {

            Component frame = null;
            JOptionPane.showMessageDialog(frame,
                    "Favor verificar se os campos foram preenchidos corretamente");

        } else {

            String pacienteNome = pacienteObj.getnome();
            String pacientecpf = pacienteObj.getcpf();
            String pacienteIdent = null;

            ModelAgendaPaciente agendaPaciente = new ModelAgendaPaciente();

            agendaPaciente.setNome(pacienteNome);
            agendaPaciente.setCpf(pacientecpf);
            agendaPaciente.setResponsavel(comboFunc.getSelectedItem().toString());

            //data dos agendamentos - última alteração
            Date dataAgendamento = new Date();
            Timestamp tsAgendamento = new Timestamp(dataAgendamento.getTime());
            String dataAgendamentoStr = tsAgendamento.toString();
            agendaPaciente.setTsDtAgendamento(dataAgendamentoStr);

            ArrayList<HashMap<String, Timestamp>> agendaClass = new ArrayList<>();

            //os agendamentos já existentes
            for (String lineOld : edtAgendamento.getText().split("\\n")) {
                HashMap<String, Timestamp> sessoesPaciente = new HashMap<>();
                if (!lineOld.isEmpty()) {
                    //2020-07-11 16:10:15.732
                    String sessaoTsOld = lineOld.split(" ; ")[2];
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss.SSS");
                    Date parsedDate;
                    try {
                        parsedDate = dateFormat.parse(sessaoTsOld);
                        Timestamp timestamp = new java.sql.Timestamp(parsedDate.getTime());
                        sessoesPaciente.put(lineOld, timestamp);

                        agendaClass.add(sessoesPaciente);
                    } catch (ParseException ex) {
                        Logger.getLogger(Agenda.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }

            //novos agendamentos
            for (String line : edtAgendaNew.getText().split("\\n")) {
                HashMap<String, Timestamp> sessoesPaciente = new HashMap<>();
                if (!line.isEmpty()) {
                    //evitar sobrescrever o mesmo evento/agendamento no google agenda
                    String eveId = line.split(" ; ")[4];

                    //2020-07-11 16:10:15.732
                    String sessaoTs = line.split(" ; ")[2];
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss.SSS");
                    Date parsedDate;
                    try {

                        parsedDate = dateFormat.parse(sessaoTs);
                        Timestamp timestamp = new java.sql.Timestamp(parsedDate.getTime());
                        sessoesPaciente.put(line, timestamp);

                        agendaClass.add(sessoesPaciente);

                        //pra baixo é google agenda
                        String start = line.split(" ; ")[0];
                        String ano = start.split("-")[2].trim();
                        String mes = start.split("-")[1];
                        String dia = start.split("-")[0];
                        String horaIni = start.split(" - ")[1].split("/")[0];
                        String horaFim = start.split(" - ")[1].split("/")[1];
                        String agIni = ano + "-" + mes + "-" + dia + "T" + horaIni + ":00-03:00";
                        String agFim = ano + "-" + mes + "-" + dia + "T" + horaFim + ":00-03:00";

                        String comboSala = line.split(" ; ")[3];

                        pacienteIdent = pacienteObj.getId();
                        agendaPaciente.setPhone(pacienteObj.gettelefone());

                        //procedimento
                        String proc = comboProc.getSelectedItem().toString();

                        //buscar Clandar ID do profissional
                        ModelCadastroFunc func = mdfunc.stream()
                                .filter(nome -> comboFunc.getSelectedItem().toString().equals(nome.getNomeFunc()))
                                .findAny()
                                .orElse(null);

                        //criar evento no google agenda
                        setEvent(pacienteNome,
                                comboSala,
                                func.getNomeFunc() + " / " + proc,
                                agIni,
                                agFim,
                                pacienteObj.getEmail(),
                                "marcelorv@gmail.com",
                                eveId,
                                func.getCalendarId());

                    } catch (ParseException ex) {
                        Logger.getLogger(TelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    agendaPaciente.setSessoes(agendaClass);
                    if (pacienteIdent != null) {
                        FireBaseClient fbcli = new FireBaseClient();

                        DocumentReference docRef = fbcli.FirebaseInt().collection("agendamentos")
                                .document(pacienteIdent);
                        ApiFuture<WriteResult> result;

                        result = docRef.set(agendaPaciente, SetOptions.merge());

                        try {
                            System.out.println("Update time : " + result.get().getUpdateTime());

                        } catch (InterruptedException | ExecutionException ex) {
                            Logger.getLogger(Agenda.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                }

            }
            Component frame = null;
            JOptionPane.showMessageDialog(frame,
                    "Agenda cadastrada com sucesso!");
            edtAgendaNew.setText("");
            this.dispose();
        }

    }//GEN-LAST:event_btnConfirmarAgendamentoActionPerformed

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        this.dispose();

    }//GEN-LAST:event_btnVoltarActionPerformed

    private void setEvent(
            String sumario,
            String location,
            String descricao,
            String inicio,
            String fim,
            String email1,
            String email2,
            String id,
            String func
    ) {
        try {

            GoogleAgendaClientCalendar gacc = new GoogleAgendaClientCalendar();

            Event event = new Event()
                    .setId(id)
                    .setSummary(sumario)
                    .setLocation(location)
                    .setDescription(descricao);

            DateTime startDateTime = new DateTime(inicio);
            EventDateTime start = new EventDateTime()
                    .setDateTime(startDateTime)
                    .setTimeZone("America/Sao_Paulo");
            event.setStart(start);

            DateTime endDateTime = new DateTime(fim);
            EventDateTime end = new EventDateTime()
                    .setDateTime(endDateTime)
                    .setTimeZone("America/Sao_Paulo");
            event.setEnd(end);

            EventAttendee[] attendees = new EventAttendee[]{
                new EventAttendee().setEmail(email1),
                new EventAttendee().setEmail(email2),};
            event.setAttendees(Arrays.asList(attendees));

            EventReminder[] reminderOverrides = new EventReminder[]{
                new EventReminder().setMethod("email").setMinutes(24 * 60),
                new EventReminder().setMethod("popup").setMinutes(10),};
            Event.Reminders reminders = new Event.Reminders()
                    .setUseDefault(false)
                    .setOverrides(Arrays.asList(reminderOverrides));
            event.setReminders(reminders);

            //String calendarId = "primary";
            String calendarId = func;
            event = gacc.CalendarSVC().events().insert(calendarId, event).execute();

            System.out.printf("Event created: %s\n", event.getHtmlLink());

        } catch (GeneralSecurityException | IOException ex) {
            Logger.getLogger(Agenda.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Agenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new Agenda().setVisible(true);
            } catch (InterruptedException | ExecutionException ex) {
                Logger.getLogger(Agenda.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirmarAgendamento;
    private javax.swing.JButton btnInserirSessao;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JComboBox<String> comboFunc;
    private javax.swing.JComboBox<String> comboHoraFim;
    private javax.swing.JComboBox<String> comboHoraInicio;
    private javax.swing.JComboBox<String> comboMinFim;
    private javax.swing.JComboBox<String> comboMinInicio;
    private javax.swing.JComboBox<String> comboProc;
    private javax.swing.JComboBox<String> comboSalas;
    private javax.swing.JTextArea edtAgendaNew;
    private javax.swing.JTextArea edtAgendamento;
    private com.toedter.calendar.JDateChooser edtData;
    private javax.swing.JDesktopPane jDesktopAgendamento;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel txtData;
    private javax.swing.JLabel txtHora;
    // End of variables declaration//GEN-END:variables

    private void initComboBoxSalas() throws InterruptedException, ExecutionException {

        FireBaseClient fbcli = new FireBaseClient();
        ApiFuture<QuerySnapshot> query = fbcli.FirebaseInt().collection("salas").get();
        QuerySnapshot querySnapshot = query.get();
        List<QueryDocumentSnapshot> documents = querySnapshot.getDocuments();
        comboSalas.removeAllItems();
        comboSalas.addItem("Selecione a Sala");
        documents.forEach((QueryDocumentSnapshot document) -> {
            String nomeSala = document.toObject(ModelSala.class).getNomeSala();
            comboSalas.addItem(nomeSala);
        });

    }

    private void initComboProc() throws InterruptedException, ExecutionException {
        FireBaseClient fbcli = new FireBaseClient();
        ApiFuture<QuerySnapshot> query = fbcli.FirebaseInt().collection("procedimentos").get();
        QuerySnapshot querySnapshot = query.get();
        List<QueryDocumentSnapshot> documents = querySnapshot.getDocuments();
        comboProc.removeAllItems();
        comboProc.addItem("Selecione o procedimento");
        documents.forEach((QueryDocumentSnapshot document) -> {
            String procedimento = document.toObject(ModelProcedimento.class).getProcedimento();
            comboProc.addItem(procedimento);
        });
    }

    private void initComboFunc() throws InterruptedException, ExecutionException {
        FireBaseClient fbcli = new FireBaseClient();
        ApiFuture<QuerySnapshot> query = fbcli.FirebaseInt().collection("funcionarios").get();
        QuerySnapshot querySnapshot = query.get();
        List<QueryDocumentSnapshot> documents = querySnapshot.getDocuments();
        comboFunc.removeAllItems();
        comboFunc.addItem("Selecione o responsável");
        documents.forEach((QueryDocumentSnapshot document) -> {
            String func = document.toObject(ModelCadastroFunc.class).getNomeFunc();
            mdfunc.add(document.toObject(ModelCadastroFunc.class));
            comboFunc.addItem(func);
        });

    }

    private void initFrame() {
        edtAgendamento.setText("");

        FireBaseClient fbc = new FireBaseClient();

        String pacienteNome = pacienteObj.getnome();
        String pacientecpf = pacienteObj.getcpf();

        try {
            DocumentReference docRef = fbc.FirebaseInt().collection("agendamentos").document(pacienteObj.getId());
            ApiFuture<DocumentSnapshot> future = docRef.get();
            DocumentSnapshot document = future.get();
            ModelAgendaPaciente agp = null;
            if (document.exists()) {
                // convert document to POJO
                agp = document.toObject(ModelAgendaPaciente.class);
                ArrayList<HashMap<String, Timestamp>> sessoes = agp.sessoes;

                for (HashMap<String, Timestamp> hashMap : sessoes) {

                    hashMap.keySet().stream().map((key) -> {
                        System.out.println("String Sessão => " + key);
                        return key;
                    }).map((key) -> {
                        edtAgendamento.append(key + "\n");
                        return key;
                    }).forEachOrdered((key) -> {
                        //ArrayList para conferir na hora de inserir as sessoes no FBase
                        sessoesLista.add(key);
                    });
                }

            } else {
                edtAgendamento.append("Paciente sem agendamentos");
            }

        } catch (InterruptedException | ExecutionException ex) {
            Logger.getLogger(TelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
